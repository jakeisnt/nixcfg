#!/usr/bin/env nix-shell
#! nix-shell -p babashka -i "bb -i"

(ns hey
  (:require [babashka.process :as p]
            [clojure.core.match :refer [match]]
            [clojure.java.io :as io]))

(def flake "/etc/nixos")

;; rum a command with a custom printer and sane defaults provided to the process
(defn cmd [args & [settings]]
  (let
   [proc (p/process args (merge {:out :inherit :err :inherit :shutdown p/destroy-tree} (or settings nil)))]
    (with-open [rdr (io/reader (:out proc))]
      (binding [*in* rdr]
        @proc
        nil))))

;; find a nixpkgs package available to the current NixOS system
;; TODO: I wish this linked to the nix package build and wehre it came from!
(defn find [packname]
  (cmd ["nix" "search" "nixos" packname]))

;; update the provided flake
(defn update [flake]
  (cmd ["nix" "flake" "update" flake "--impure"]))

;; Run a shell with the provided shell args
(defn shell [args]
  (cmd (vec (concat ["nix-shell"] args ["--command" "$SHELL"]))))

;; rebuild and switch to the system
(defn rebuild [flake]
  (cmd
   ["sudo" "nixos-rebuild" "switch"
    "--flake" flake
    "--option" "pure-eval" "no"]
   {:in :inherit :out :inherit}))

;; collect garbage
(defn collect-garbage []
  (cmd ["nix-collect-garbage"]))

(defn upgrade [flake]
  (do
    (update flake)
    (rebuild flake)))

(defn main [args]
  (let [args (vec args)]
    (println args)
    (match args
      ["shell" & args] (shell args)
      ["find" packname] (find packname)
      ["rebuild"] (rebuild flake)
      ["update"] (update flake)
      ["upgrade"] (upgrade flake)
      ["gc"] (collect-garbage)
      :else (println "Commands provided were invalid - sorry!"))))

(main *command-line-args*)

;; vi: ft=clojure
