#!/usr/bin/env nix-shell
#! nix-shell -p babashka -i "bb -i"

(ns hey
  (:require [clojure.tools.cli :refer [parse-opts]]
            [clojure.java.shell :refer [sh]]
            [babashka.process :as p]
            [clojure.core.match :refer [match]])
  (:gen-class))

(def flake "/etc/nixos")

(def cli-options
  [["f" "find PACKNAME" "Package name to search for"]
   ["r" "rebuild" "Rebuild the current NixOS image without upgrading"]
   ["u" "upgrade" "Upgrade and rebuild the NixOS image with new, upgraded inputs"]
   ["-h" "--help"]])

;; find a nixpkgs package available
(defn find [packname]
  (do (p/process ["nix" "search" "nixpkgs" packname] {:out :inherit}) nil))

;; update the provided flake
(defn update [flake]
  (do @(p/process ["nix" "flake" "update" flake "--impure"]) nil))

;; rebuild and switch to the system
(defn rebuild [flake]
  (do @(p/process
         ["sudo" "nixos-rebuild" "switch"
          "--flake" flake
          "--option" "pure-eval" "no"]
         {:in :inherit :out :inherit}))
  nil)

(defn upgrade [flake]
  (update flake)
  (rebuild flake))

(defn main [args]
  (let
    [res (parse-opts args cli-options)
     opts (:options res)
     args (:arguments res)]

    (match args
           ["find" packname] (find packname)
           ["rebuild"] (rebuild flake)
           ["update"] (update flake)
           ["upgrade"] (upgrade flake)
           :else (println "Commands provided were invalid - sorry!"))))

(main *command-line-args*)

;; vi: ft=clojure
