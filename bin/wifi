#!/usr/bin/env nix-shell
#! nix-shell -p ruby rubyPackages.thor captive-browser -i "ruby"

# TODO: Easy-to-use wrapper CLI script for wifi.
# Ideally this uses a nushell-compatible interface : )

# Redirect STDOUT to /dev/null to run the command.
def quiet
  old_stdout = $stdout.dup
  $stdout = File.new( '/dev/null', 'w' )
  yield
ensure
  $stdout = STDOUT
end


require 'thor'

class WifiCLI < Thor
  class_option :verbose, :type => :boolean, :aliases => "-v"

  # TODO: Display an interactive list of networks to connect to.
  # Update the list as more networks become available.
  # Pressing 'enter' on a network should connect to it, effectively running `connect ...`.
  desc "list", "List available wifi networks"
  def list
    puts `nmcli device wifi list`
  end

  # TODO: Disconnect from the current wifi network.
  desc "disconnect", "Disconnect from the current wifi network"
  def disconnect
  end

  # Connect to a wifi network, prompting for a password if necessary.
  # If a wifi network has a portal, this should open the portal in a browser.
  desc "connect NETWORK", "Connect to the specified network"
  def connect(network)
    puts `nmcli device wifi connect #{network} --ask`

    # TODO: Check if the network has a captive portal with `captive-browser`.
    quiet { `captive-browser` }
    if $?.exitstatus != 0
      puts "No captive portal detected. You should be good."
    else
      puts "Captive portal detected. Browser should have opened."
    end
  end

  # Restart the wifi system. Not sure if this is the best way to approach it or solve slow wifi issues.
  desc "reset", "Reset the wifi connection"
  def reset
    puts `systemctl restart NetworkManager`
  end

  # List all of the currently connected wifi devices.
  desc "devices", "List all available wifi devices"
  def devices
    puts `nmcli device`
  end

  # List all of the currently connected wifi devices.
  desc "hotspot", "Create a wifi hotspot connection"
  def devices
    puts `nmcli device wifi hotspot`
  end
end

WifiCLI.start(ARGV)

# vi: ft=ruby
