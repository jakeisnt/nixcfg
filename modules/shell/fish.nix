{ config, options, pkgs, lib, ... }:

with lib;
with lib.my;
let cfg = config.modules.shell.fish;
in {
  options.modules.shell.fish = with types; {
    enable = mkBoolOpt false;

    aliases = mkOpt (attrsOf (either str path)) { };

    rcInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshrc and sourced by
      $XDG_CONFIG_HOME/zsh/.zshrc
    '';
    envInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshenv and sourced
      by $XDG_CONFIG_HOME/zsh/.zshenv
    '';

    rcFiles = mkOpt (listOf (either str path)) [ ];
    envFiles = mkOpt (listOf (either str path)) [ ];
  };

  config = mkIf cfg.enable {
    users.defaultUserShell = pkgs.fish;

    programs.fish = {
      enable = true;
      # promptInit = "";
    };

    user.packages = with pkgs; [
      # bat
      # exa
      # fasd
      # fd
      # fzf
      # tldr
    ];

    # system.userActivationScripts.cleanupZgen = "rm -fv $XDG_CACHE_HOME/zsh/*";

    # env = {
    #   ZDOTDIR = "$XDG_CONFIG_HOME/zsh";
    #   ZSH_CACHE = "$XDG_CACHE_HOME/zsh";
    #   ZGEN_DIR = "$XDG_DATA_HOME/zsh";
    #   ZGEN_SOURCE = "$ZGEN_DIR";
    # };

    home.configFile = {
      # Why am I creating extra.zsh{rc,env} when I could be using extraInit?
      # Because extraInit generates those files in /etc/profile, and mine just
      # write the files to ~/.config/zsh; where it's easier to edit and tweak
      # them in case of issues or when experimenting.
      # "zsh/extra.zshrc".text = let
      #   aliasLines = mapAttrsToList (n: v: ''alias ${n}="${v}"'') cfg.aliases;
      # in ''
      #   # This file was autogenerated, do not edit it!
      #   ${concatStringsSep "\n" aliasLines}
      #   ${concatMapStrings (path: ''
      #     source '${path}'
      #   '') cfg.rcFiles}
      #   ${cfg.rcInit}
      # '';

      # "zsh/extra.zshenv".text = ''
      #   # This file is autogenerated, do not edit it!
      #   ${concatMapStrings (path: ''
      #     source '${path}'
      #   '') cfg.envFiles}
      #   ${cfg.envInit}
      # '';
    };
  };
}
